#!/usr/bin/env python3
"""
Telegram Bot Setup Script
自动登录并获取 Session String 的设置脚本
"""

import os
import json
from pyrogram import Client


def print_banner():
    """打印欢迎横幅"""
    print("=" * 60)
    print("  Telegram Bot 自动配置工具")
    print("  Save Restricted Content Bot Setup")
    print("=" * 60)
    print()


def get_input(prompt, default=None):
    """获取用户输入"""
    if default:
        user_input = input(f"{prompt} (默认: {default}): ").strip()
        return user_input if user_input else default
    else:
        while True:
            user_input = input(f"{prompt}: ").strip()
            if user_input:
                return user_input
            print("❌ 此项不能为空，请重新输入！")


def save_to_env(token, api_id, api_hash, session_string):
    """保存配置到 .env 文件"""
    env_content = f"""# Telegram Bot Configuration
# Auto-generated by setup.py

# Your bot token from @BotFather
TOKEN={token}

# Your API ID from my.telegram.org
ID={api_id}

# Your API Hash from my.telegram.org
HASH={api_hash}

# Your session string (auto-generated)
STRING={session_string}
"""
    
    with open('.env', 'w', encoding='utf-8') as f:
        f.write(env_content)
    
    print("✅ 配置已保存到 .env 文件")


def save_to_config_json(token, api_id, api_hash, session_string):
    """保存配置到 config.json 文件"""
    config = {
        "TOKEN": token,
        "ID": api_id,
        "HASH": api_hash,
        "STRING": session_string
    }
    
    with open('config.json', 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=4)
    
    print("✅ 配置已保存到 config.json 文件")


def generate_session_string(api_id, api_hash, phone_number):
    """生成 Session String"""
    print("\n📱 正在连接到 Telegram...")
    print("⏳ 请稍候...")
    
    # 创建临时客户端用于登录
    app = Client(
        "temp_session",
        api_id=api_id,
        api_hash=api_hash,
        phone_number=phone_number
    )
    
    try:
        with app:
            # 导出 session string
            session_string = app.export_session_string()
            print("✅ Session String 生成成功！")
            return session_string
    except Exception as e:
        print(f"❌ 生成失败: {e}")
        return None
    finally:
        # 清理临时文件
        if os.path.exists("temp_session.session"):
            os.remove("temp_session.session")


def main():
    """主函数"""
    print_banner()
    
    print("此工具将帮助您自动配置 Telegram Bot")
    print("您需要准备以下信息：")
    print("  1. Bot Token (从 @BotFather 获取)")
    print("  2. API ID 和 API Hash (从 https://my.telegram.org 获取)")
    print("  3. 您的手机号 (用于登录 Telegram)")
    print()
    
    # 步骤 1: 获取 Bot Token
    print("📋 步骤 1/4: Bot Token")
    print("-" * 60)
    print("请访问 @BotFather 创建一个 Bot，并获取 Token")
    print("Token 格式示例: 1234567890:ABCdefGHIjklMNOpqrsTUVwxyz")
    bot_token = get_input("请输入 Bot Token")
    print()
    
    # 步骤 2: 获取 API 凭据
    print("📋 步骤 2/4: API 凭据")
    print("-" * 60)
    print("请访问 https://my.telegram.org 获取 API ID 和 API Hash")
    api_id = get_input("请输入 API ID (纯数字)")
    api_hash = get_input("请输入 API Hash (32位字符)")
    print()
    
    # 步骤 3: 询问是否需要 Session String
    print("📋 步骤 3/4: Session String (用户会话)")
    print("-" * 60)
    print("Session String 用于访问私有频道和受限内容")
    print("如果只需要转发公开内容，可以跳过此步骤")
    need_session = get_input("是否需要生成 Session String? (y/n)", "y").lower()
    
    session_string = ""
    
    if need_session in ['y', 'yes', '是']:
        print()
        print("📱 开始登录 Telegram 账号...")
        print("-" * 60)
        print("请输入您的手机号（带国家代码）")
        print("示例: +8613800138000")
        phone_number = get_input("手机号")
        
        print()
        print("正在生成 Session String...")
        print("⚠️  注意: Telegram 会向您的账号发送验证码")
        print()
        
        session_string = generate_session_string(api_id, api_hash, phone_number)
        
        if not session_string:
            print()
            print("⚠️  Session String 生成失败，但您仍可继续配置")
            print("   Bot 将只能访问公开内容")
            retry = get_input("是否重试? (y/n)", "n").lower()
            if retry in ['y', 'yes', '是']:
                session_string = generate_session_string(api_id, api_hash, phone_number)
    else:
        print("⏭️  已跳过 Session String 生成")
        print("   Bot 将只能访问公开内容")
    
    print()
    
    # 步骤 4: 保存配置
    print("📋 步骤 4/4: 保存配置")
    print("-" * 60)
    
    # 同时保存到两个文件
    save_to_env(bot_token, api_id, api_hash, session_string)
    save_to_config_json(bot_token, api_id, api_hash, session_string)
    
    print()
    print("=" * 60)
    print("✅ 配置完成！")
    print("=" * 60)
    print()
    print("下一步:")
    print("  • 如果使用 Docker: 运行 docker-compose up -d")
    print("  • 如果本地运行: 运行 python main.py")
    print()
    print("更多信息请查看 README.md")
    print()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n⚠️  设置已取消")
    except Exception as e:
        print(f"\n❌ 发生错误: {e}")
        print("请检查您的输入是否正确，或手动配置 .env 文件")
